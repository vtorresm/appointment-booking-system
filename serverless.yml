service: medical-appointment-backend

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1  # Cambia según sea necesario
  environment:
    DYNAMODB_TABLE: Appointments
    SNS_TOPIC_PE: arn:aws:sns:${self:provider.region}:${aws:accountId}:AppointmentTopic-PE  # ARN dinámico
    SNS_TOPIC_CL: arn:aws:sns:${self:provider.region}:${aws:accountId}:AppointmentTopic-CL
    SQS_PE: https://sqs.${self:provider.region}.amazonaws.com/${aws:accountId}/SQS_PE
    SQS_CL: https://sqs.${self:provider.region}.amazonaws.com/${aws:accountId}/SQS_CL
    CONFIRMATION_SQS: https://sqs.${self:provider.region}.amazonaws.com/${aws:accountId}/ConfirmationSQS
    EVENTBRIDGE_BUS: custom-event-bus
    RDS_HOST: cita-medica.cuv22sy26rkm.us-east-1.rds.amazonaws.com
    RDS_USER: admin
    RDS_PASSWORD: ${ssm:/medical-appointment/rds/password}  # Usa SSM para secretos
    RDS_DATABASE: medical_appointments
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}/index/InsuredIdIndex
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource: "*"
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: "*"

plugins:
  - serverless-offline
  - serverless-openapi-documentation
  - serverless-dynamodb-local

# Package configuration
package:
  patterns:
    - '!**/*'
    - 'src/**'
    - 'node_modules/**'
    - '!node_modules/aws-sdk/**'
    - '!node_modules/typescript/**'

custom:
  documentation:
    api:
      info:
        title: Medical Appointment API
        version: 1.0.0
        description: Backend para agendamiento de citas médicas
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    noPrependStageInUrl: true
    useChildProcesses: true
    noAuth: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      javaPath: 'C:\jdk17.0.16_8\bin\java.exe' # Ruta explícita a Java
    stages:
      - dev

functions:
  appointmentPost:
    handler: src/handlers/appointment.postHandler
    timeout: 60 # Aumentado a 60 segundos
    events:
      - http:
          path: /appointment
          method: post
  appointmentGet:
    handler: src/handlers/appointment.getHandler
    events:
      - http:
          path: /appointments/{insuredId}
          method: get
  appointmentProcessPE:
    handler: src/handlers/appointmentPE.handler
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:SQS_PE
  appointmentProcessCL:
    handler: src/handlers/appointmentCL.handler
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:SQS_CL
  appointmentConfirm:
    handler: src/handlers/appointment.confirmHandler
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:ConfirmationSQS

resources:
  Resources:
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: InsuredIdIndex
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    AppointmentTopicPE:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AppointmentTopic-PE
    AppointmentTopicCL:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AppointmentTopic-CL
    SQSPe:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE
    SubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopicPE
        Endpoint: !GetAtt SQSPe.Arn
        Protocol: sqs
    SQSCl:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL
    SubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopicCL
        Endpoint: !GetAtt SQSCl.Arn
        Protocol: sqs
    ConfirmationSQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ConfirmationSQS
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:provider.environment.EVENTBRIDGE_BUS}
    EventRulePE:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source: ["appointment.pe"]
        Targets:
          - Arn: !GetAtt ConfirmationSQS.Arn
            Id: ConfirmationTarget
    EventRuleCL:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source: ["appointment.cl"]
        Targets:
          - Arn: !GetAtt ConfirmationSQS.Arn
            Id: ConfirmationTarget